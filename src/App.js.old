// eslint-disable-next-line
import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [username, setUsername] = useState('');
  const [isPolling, setIsPolling] = useState(false);
  const [pollingIntervalId, setPollingIntervalId] = useState(null);
  const [geminiData, setGeminiData] = useState(null); // For storing fetched Gemini data
  const [notifications, setNotifications] = useState([]);
  const [error, setError] = useState(null);
  const apiUrl = "http://localhost:3001"

  // Function to fetch the JSON from the public S3 URL
  const fetchFromS3 = (s3Key) => {
    const s3Url = `http://localhost:3001/fetch-s3/${ encodeURIComponent(s3Key)}`
    //const s3Url = `https://doxme-profiles.s3.amazonaws.com/${s3Key}`;

    fetch(s3Url)
      .then((response) => {
        if (!response.ok) {
          throw new Error('S3 object not available yet');
        }
        return response.json();
      })
      .then((data) => {
        setGeminiData(data); // Store the fetched data
        clearInterval(pollingIntervalId); // Stop polling when data is found
        setIsPolling(false);
      })
      .catch((error) => {
        console.error('Error fetching data from S3:', error);
      });
  };

  const pollForS3Object = (s3Key) => {
    setIsPolling(true);
    const intervalId = setInterval(() => {
      fetchFromS3(s3Key);
    }, 5000); // Poll every 5 seconds
    setPollingIntervalId(intervalId);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!username) {
      alert('Please enter a Reddit username');
      return;
    }

    setNotifications((prevNotifications) => [
      ...prevNotifications,
      { id: Date.now(), status: `Fetching profile for ${username}...` }
    ]);

    // Post the Reddit username to the new '/fetch/profile' endpoint
    fetch(`${apiUrl}/fetch/profile`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ username })
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch profile data');
        }
        return response.json();
      })
      .then((data) => {
        const s3Key = data.data.key; // Parse the S3 key from the response
        console.log('Received s3_key:', s3Key);
        setNotifications((prevNotifications) => [
          ...prevNotifications,
          { id: Date.now(), status: `Polling S3 for key: ${s3Key}` }
        ]);
        pollForS3Object(s3Key); // Start polling S3 for the object
      })
      .catch((error) => {
        console.error('Error during profile fetch:', error);
        setError('Failed to fetch profile.');
      });
  };

  return (
    <div className="App">
      <header className="terminal">
        <h1>DoxMe</h1>

        <p>
          AI such as Google Gemini and ChatGPT can analyze and extract information from the text provided by users.
          This means that if users share personally identifiable information (PII), such as their names, addresses,
          or other sensitive data, people can obtain this information for other purposes. Always be cautious and avoid
          sharing personal or sensitive details in such interactions.
        </p>

        <p>
          Enter your Reddit username below to discover what AI can tell about you.
        </p>

        <form onSubmit={handleSubmit}>
          <label>
            Reddit Username:
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="Enter Reddit username"
            />
          </label>
          <button type="submit">Submit</button>
        </form>

        {error && <p className="error">{error}</p>}

        <div className="notifications">
          {notifications.map((notification) => (
            <div key={notification.id} className="notification">
              {notification.status}
            </div>
          ))}
        </div>

        {isPolling && <p>Polling S3 for the results... <span className="cursor-blink"></span></p>}

        {geminiData && (
          <div>
            <h2>Gemini Analysis</h2>
            <table>
              <thead>
                <tr>
                  <th>Category</th>
                  <th>Details</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Estimated Place of Birth</td>
                  <td>{geminiData.demographics.estimated_place_of_birth.value} (Confidence: {geminiData.demographics.estimated_place_of_birth.confidence})</td>
                </tr>
                <tr>
                  <td>Current Location</td>
                  <td>{geminiData.demographics.current_location.value} (Confidence: {geminiData.demographics.current_location.confidence})</td>
                </tr>
                <tr>
                  <td>Primary Language</td>
                  <td>{geminiData.demographics.primary_language.value} (Confidence: {geminiData.demographics.primary_language.confidence})</td>
                </tr>
                <tr>
                  <td>Gender</td>
                  <td>{geminiData.demographics.gender.value} (Confidence: {geminiData.demographics.gender.confidence})</td>
                </tr>
                <tr>
                  <td>Age</td>
                  <td>{geminiData.demographics.age.value} (Confidence: {geminiData.demographics.age.confidence})</td>
                </tr>
                <tr>
                  <td>Interests</td>
                  <td>{geminiData.interests.join(', ')}</td>
                </tr>
                <tr>
                  <td>Hobbies</td>
                  <td>{geminiData.hobbies.join(', ')}</td>
                </tr>
                <tr>
                  <td>Education Level</td>
                  <td>{geminiData.education_level.value} (Confidence: {geminiData.education_level.confidence})</td>
                </tr>
                <tr>
                  <td>Specific Locations</td>
                  <td>{geminiData.specific_locations.join(', ')}</td>
                </tr>
                <tr>
                  <td>Explanation</td>
                  <td>{geminiData.explanation}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;

